package com.moldi_sams.se_project.service.implementation;

import com.moldi_sams.se_project.request.admin.AiPromptRequest;
import com.moldi_sams.se_project.response.AiPromptResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

@Service
@RequiredArgsConstructor
public class AiService {
    @Value("${ai.secret-key}")
    private String secretKey;

    @Value("${ai.api-url}")
    private String apiUrl;

    private final RestTemplate restTemplate;
    private final JdbcTemplate jdbcTemplate;

    private String generateSqlQuery(AiPromptRequest request) {
        String systemPrompt = "You are an assistant. Your task is to generate SQL queries based on the given prompt by the user. Generate ONLY the queries, don't say anything else!\nThe database schema is: [SCHEMA]\nThe prompt is: [PROMPT]";
        String schema = "create table if not exists images\n" +
                "(\n" +
                "    image_id    bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    name        text,\n" +
                "    object_name text,\n" +
                "    size        numeric(38, 2),\n" +
                "    type        varchar(255),\n" +
                "    url         text\n" +
                ");\n" +
                "\n" +
                "alter table images\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists product_brands\n" +
                "(\n" +
                "    product_brand_id bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    name             varchar(255)\n" +
                ");\n" +
                "\n" +
                "alter table product_brands\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists product_categories\n" +
                "(\n" +
                "    product_category_id bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    name                varchar(255)\n" +
                ");\n" +
                "\n" +
                "alter table product_categories\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists product_genders\n" +
                "(\n" +
                "    product_gender_id bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    name              varchar(255)\n" +
                ");\n" +
                "\n" +
                "alter table product_genders\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists product_sizes\n" +
                "(\n" +
                "    product_size_id bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    name            varchar(255)\n" +
                ");\n" +
                "\n" +
                "alter table product_sizes\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists products\n" +
                "(\n" +
                "    product_id                   bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    description                  text,\n" +
                "    name                         varchar(255),\n" +
                "    price                        numeric(38, 2),\n" +
                "    stock                        bigint,\n" +
                "    brand_product_brand_id       bigint\n" +
                "        constraint fkkb9e32ppy4nrhhabgqeoy88id\n" +
                "            references product_brands,\n" +
                "    category_product_category_id bigint\n" +
                "        constraint fkr3vwl0p93bc7slmkpc45839nk\n" +
                "            references product_categories,\n" +
                "    gender_product_gender_id     bigint\n" +
                "        constraint fkp4uy5egfuo51csqrqo7bmgtvu\n" +
                "            references product_genders\n" +
                ");\n" +
                "\n" +
                "alter table products\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists order_line_product\n" +
                "(\n" +
                "    order_line_product_id        bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    quantity                     bigint,\n" +
                "    product_product_id           bigint\n" +
                "        constraint fkjt27qjalf92h9p7o7u7tf54n6\n" +
                "            references products,\n" +
                "    product_size_product_size_id bigint\n" +
                "        constraint fkfacg91hah37sl3casvyjgj7d6\n" +
                "            references product_sizes\n" +
                ");\n" +
                "\n" +
                "alter table order_line_product\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists products_images\n" +
                "(\n" +
                "    product_product_id bigint not null\n" +
                "        constraint fkho6rcmqmu30s8mqlki8heav8e\n" +
                "            references products,\n" +
                "    images_image_id    bigint not null\n" +
                "        constraint fk8f3cd1tqu8dqxqyojylucha6g\n" +
                "            references images\n" +
                ");\n" +
                "\n" +
                "alter table products_images\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists products_sizes\n" +
                "(\n" +
                "    product_product_id    bigint not null\n" +
                "        constraint fk44vfnfgmj8q3mxcf5yoc86ic7\n" +
                "            references products,\n" +
                "    sizes_product_size_id bigint not null\n" +
                "        constraint fkb0eqnb4f44hnt0dwinkxvs216\n" +
                "            references product_sizes\n" +
                ");\n" +
                "\n" +
                "alter table products_sizes\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists user_personal_informations\n" +
                "(\n" +
                "    user_personal_information_id bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    address                      text,\n" +
                "    first_name                   varchar(255),\n" +
                "    last_name                    varchar(255)\n" +
                ");\n" +
                "\n" +
                "alter table user_personal_informations\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists orders\n" +
                "(\n" +
                "    order_id                                               bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    order_date                                             timestamp(6),\n" +
                "    order_status                                           varchar(255)\n" +
                "        constraint orders_order_status_check\n" +
                "            check ((order_status)::text = ANY\n" +
                "                   ((ARRAY ['PENDING'::character varying, 'PAID'::character varying, 'DELIVERED'::character varying])::text[])),\n" +
                "    total_price                                            numeric(38, 2),\n" +
                "    user_personal_information_user_personal_information_id bigint\n" +
                "        constraint fkn7oa6jo103i63db6ntm29nte0\n" +
                "            references user_personal_informations\n" +
                ");\n" +
                "\n" +
                "alter table orders\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists orders_order_line_products\n" +
                "(\n" +
                "    order_order_id                            bigint not null\n" +
                "        constraint fkhhegf21buxsutmvtnra52pvsl\n" +
                "            references orders,\n" +
                "    order_line_products_order_line_product_id bigint not null\n" +
                "        constraint fk3c4bj5vmue6txdq54e7ernl6c\n" +
                "            references order_line_product\n" +
                ");\n" +
                "\n" +
                "alter table orders_order_line_products\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists reviews\n" +
                "(\n" +
                "    review_id                                              bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    comment                                                text,\n" +
                "    rating                                                 integer,\n" +
                "    review_date                                            timestamp(6),\n" +
                "    product_product_id                                     bigint\n" +
                "        constraint fkn95vsu706y92ejnlpihux82xj\n" +
                "            references products,\n" +
                "    user_personal_information_user_personal_information_id bigint\n" +
                "        constraint fk4i3p5e58p0h1wly9aipvf9e9q\n" +
                "            references user_personal_informations\n" +
                ");\n" +
                "\n" +
                "alter table reviews\n" +
                "    owner to postgres_user;\n" +
                "\n" +
                "create table if not exists users\n" +
                "(\n" +
                "    user_id                                           bigint generated by default as identity\n" +
                "        primary key,\n" +
                "    email                                             varchar(255)\n" +
                "        constraint uk6dotkott2kjsp8vw4d0m25fb7\n" +
                "            unique,\n" +
                "    password                                          varchar(255),\n" +
                "    reset_password_token                              varchar(255),\n" +
                "    role                                              varchar(255)\n" +
                "        constraint users_role_check\n" +
                "            check ((role)::text = ANY\n" +
                "                   ((ARRAY ['ROLE_CUSTOMER'::character varying, 'ROLE_ADMINISTRATOR'::character varying])::text[])),\n" +
                "    username                                          varchar(255)\n" +
                "        constraint ukr43af9ap4edm43mmtq01oddj6\n" +
                "            unique,\n" +
                "    personal_information_user_personal_information_id bigint\n" +
                "        constraint fk299v5wfolsmhfjna78ux0b2e\n" +
                "            references user_personal_informations\n" +
                ");\n" +
                "\n" +
                "alter table users\n" +
                "    owner to postgres_user;\n" +
                "\n";

        String fullPrompt = systemPrompt.replace("[SCHEMA]", schema).replace("[PROMPT]", request.prompt());

        return callAiApi(fullPrompt);
    }

    private String callAiApi(String prompt) {
        List<Map<String, String>> messages = new ArrayList<>();

        Map<String, String> userMessage = new HashMap<>();
        userMessage.put("role", "user");
        userMessage.put("content", prompt);
        messages.add(userMessage);

        Map<String, Object> requestBody = Map.of(
                "model", "gpt-3.5-turbo",
                "messages", messages,
                "max_tokens", 500
        );

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + secretKey);
        headers.set("Content-Type", "application/json");

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

        ResponseEntity<String> response = restTemplate.exchange(apiUrl, HttpMethod.POST, entity, String.class);

        if (response.getStatusCode().is2xxSuccessful()) {
            try {
                String responseBody = response.getBody();
                JsonElement rootElement = JsonParser.parseString(responseBody);
                JsonObject rootNode = rootElement.getAsJsonObject();
                JsonArray choices = rootNode.getAsJsonArray("choices");
                JsonObject choice = choices.get(0).getAsJsonObject();
                JsonObject message = choice.getAsJsonObject("message");
                String content = message.get("content").getAsString();

                return content;
            }

            catch (Exception e) {
                throw new RuntimeException("Error parsing AI API response: " + e.getMessage());
            }
        }

        else {
            throw new RuntimeException("Error calling AI API: " + response.getStatusCode());
        }
    }

    private String executeSqlQuery(String sqlQuery) {
        try {
            List<Map<String, Object>> queryResult = jdbcTemplate.queryForList(sqlQuery);

            if (queryResult.isEmpty()) {
                return "No results found for the prompt.";
            }

            StringBuilder resultString = new StringBuilder("Results:\n");

            for (Map<String, Object> row : queryResult) {
                resultString.append(row.toString()).append("\n");
            }

            return resultString.toString();
        }

        catch (Exception e) {
            return "Error executing SQL query: " + e.getMessage();
        }
    }

    private String getExplanationFromAI(String queryResult, AiPromptRequest request, String sqlQuery) {
        String prompt = "You are an assistant. Your task is to explain the following SQL query result in a clear and concise manner:\n" +
                "Query Result: " + queryResult + "\n" + "Query prompt: " + request.prompt() + "\n" + "SQL query: " + sqlQuery + "\n" +
                "Please provide a simple and understandable explanation of the result. Don't forget to include the generated SQL query!";

        return callAiApi(prompt);
    }

    public AiPromptResponse processRequest(AiPromptRequest request) {
        String sqlQuery = generateSqlQuery(request);

        String queryResult = executeSqlQuery(sqlQuery);

        return new AiPromptResponse(getExplanationFromAI(queryResult, request, sqlQuery));
    }
}
